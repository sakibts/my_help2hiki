!!my_help2hikiとは
個々のユーザが独自のメモを作ることのできるgem，my_helpを利用して作成した
メモをwikiへ自動変換することで，個人のメモを互いに見れるようにし，
研究室内で情報を共有する．

!!!コマンド
*TARGET --push : 作成したメモ(TARGET)をサーバに送る
*my_help --hiki : 作成したメモをhiki形式に変換し，wikiで表示できるようにする．

!!!コマンドの振る舞い
!!!!TARGET --push
<<<
date_dir = File.join(ENV['HOME'],'.my_help')
FileUtils.cd(data_dir)
system "rm -rf ~/.my_help/*.yml~"
system "scp -r ~/.my_help saki@nishitani0:~"
system "ssh saki@nishitani0 ls ~/.my_help"
>>>
*1，2行目
my_helpでは，作成したメモが.my_helpのディレクトリに自動的に追加されるので，
ディレクトリを.my_helpに移動する．
*3行目
.my_helpにメモが追加されるとき，yaml形式のファイルで保存される．
メモを更新すると，一つ前に保存したファイルは*.yml~というファイル名
でバックアップとして残される．
'''rm -rf'''で不必要なファイルは削除し，サーバにコピーするときのデータ量を減らしている．
*4行目
'''scp -r ~/[directory名] [server名]'''
serverにssh接続を行い，directoryをserverにコピーする．
-rはディレクトリ全体をコピーすることを示している．
西谷研究室で利用しているnishitani0というサーバにコピーしている．

----

*失敗例
ターミナルでこのコマンドを使わずにコピーする場合
<<<
/Users/saki/my_help% ssh nishitani0
Last login: Mon Jan  2 22:16:29 2017 from 59x87x69x163.ap59.ftth.ucom.ne.jp
[nishitani0:~] saki% cp -r ~/.my_help saki@nishitani0
[nishitani0:~] saki% exit
logout
Connection to nishitani0 closed.
>>>
上記にようにすると，sshで接続し.my_helpをdirectoryをcpを使ってコピー，
ssh接続を切るという作業を1行ずつ行うことができる．
同じようにコマンドの中身を下記のようにした．
<<<
system "ssh nishitani0"
system "cp -r ~/.my_help saki@nishitani0"
system "exit"
>>>
実行結果
<<<
/Users/saki/my_help% bundle exec exe/my_todo --push
Last login: Sat Jan 28 03:49:46 2017 from 59x87x69x163.ap59.ftth.ucom.ne.jp
[nishitani0:~] saki% 
>>>
このように1行目のみ実行したところで終了してしまった．
ssh接続を行うと，その後の命令は全てserver側で実行されることになるため，
1行ずつ行うと途中でターミナルでは実行ができなくなってしまいうまくいかない．

----

*失敗例2
'''ssh [server名] [command]'''とするとserverにsshで接続してcommandを実行し
ログアウトすることができるため，以下のように書き換えた．
<<<
system "ssh nishitani0 cp ~/.my_help saki@nishitani0"
>>>
実行結果
<<<
/Users/saki/my_help% bundle exec exe/my_todo --push
cp: /Users/saki/.my_help is a directory (not copied).
>>>
sshでファイルやディレクトリをコピーするコマンドはcpではなくscpなので，
実行することができなかった．
*5行目
nishitani0にssh接続し.my_helpの中身を書き出して，
コピーができているかコマンドを実行した時に確認が行えるようにしている．

----

!!!!my_help --hiki
<<<
system "emacs_help --to_hiki > ~/Sites/hiki-1.0/data/text/emacs_help_saki"
system "my_todo --to_hiki > ~/Sites/hiki-1.0/data/text/my_todo_saki"
system "ssh_help --to_hiki > ~/Sites/hiki-1.0/data/text/ssh_help_saki"
system "open -a safari 'http://localhost/~saki/hiki-1.0/?FrontPage'"
>>>
*1~3行目
my_helpには，'''TARGET --to_hiki'''というコマンドがあり，これによって
yaml形式で保存されているメモをhiki形式で書き出すことができる．
この --hiki のコマンドを使ってhiki形式にしたものを，wikiで表示することのできる
フォルダである'''~/Sites/hiki-1.0/data/text/'''に入れることで，wikiでの表示を可能にしている．
emacs_help，my_todo，ssh_helpは全て私のmy_helpに入っているメモ．
*4行目
wikiのページ'''FrontPage'''を表示するコマンド．
これによりメモが更新されているのを即時確認することができる．
FrontPageは以下のようになっている．
<<<
!saki's help
*[[ssh_help_saki]]
*[[my_todo_saki]]
*[[emacs_help_saki]]
>>>
先頭に'''!'''をつけることで1行目のsaki's helpを見出しにし，
2~4行目は'''*'''によって箇条書き，各括弧でリンクになっている．

!!!利便性
メモを更新してから，上記の２つのコマンドを共に行うと，
自分のmy_helpにあるメモ，サーバのバックアップ，
研究室内のメンバーが見ることのできるwikiの全てが同じ内容になる．
研究室内全員が同じ情報を得ることで，情報を共有するという目標が達成できる．
また，メモをすべてmy_helpで作成しておけば，忘れてしまったときに
my_helpのみを確認すればよく，管理が楽になる．
gemの開発中や課題の途中にもすぐメモを残すことができるので，
それぞれのユーザが得た暗黙知もすぐに形式知化することが可能になることが
期待される．